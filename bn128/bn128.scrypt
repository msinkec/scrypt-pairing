// TODO: Split FQ, FQ2 and FQ12 into seperate libs or use generics or something like that to shorted duplicated code?
// TODO: Implement branchless square and multiply mod inverses over P. For FQ it should be straightforward, but what about
//       higher degree polynomials?

type FQ = int;
type FQ2 = int[2];
type FQ12 = int[12];

struct PointFQ {
    int x;
    int y;
}

struct PointFQ2 {
    FQ2 x;
    FQ2 y;
}

struct PointFQ12 {
    FQ12 x;
    FQ12 y;
}

library BN128 {

    // Curve bits:
    static const int CURVE_BITS = 254;

    // Key int size:
    static const int S = 33;    // 32 bytes plus sign byte
    static const bytes mask = b'000000000000000000000000000000000000000000000000000000000000000001';
    static const bytes zero = b'000000000000000000000000000000000000000000000000000000000000000000';

    // Curve coefficients:
    static const int a = 0;
    static const int b = 3;

    // Generator point over FQ:
    static const PointFQ G1 = { 1, 2 };

    // Generator point over FQ2:
    // TODO

    // Generator point over FQ12:
    // TODO

    static const FQ2 modulusCoeffsFQ2 = [1, 0];
    static const FQ12 modulusCoeffsFQ12 = [82, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0];

    static const FQ2 zeroFQ2 = [0, 0];
    static const FQ2 oneFQ2 = [0, 1];
    static const PointFQ2 zeroPointFQ2 = { zeroFQ2, zeroFQ2 };
    static const PointFQ2 onePointFQ2 = { oneFQ2, oneFQ2 };

    static const FQ12 zeroFQ12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    static const FQ12 oneFQ12 =  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    static const PointFQ12 zeroPointFQ12 = { zeroFQ12, zeroFQ12 };
    static const PointFQ12 onePointFQ12 = { oneFQ12, oneFQ12 };

    // Curve field modulus:
    static const int P = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;
    static const bytes bP = b'47fd7cd8168c203c8dca7168916a81975d588181b64550b829a031e1724e6430';  // LE

    // Curve group modulus:
    static const int n = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001;
    static const bytes bn = b'010000f093f5e1439170b97948e833285d588181b64550b829a031e1724e6430';  // LE

    // Upper bound of the eGCD mod inverse loop:
    static const int UB = 365; 

    // Precalculated doublings for the generator point(s).
    static PointFQ[254] DOUBLINGS_G1 = [{0x0000000000000000000000000000000000000000000000000000000000000001, 0x0000000000000000000000000000000000000000000000000000000000000002}, {0x030644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd3, 0x15ed738c0e0a7c92e7845f96b2ae9c0a68a6a449e3538fc7ff3ebf7a5a18a2c4}, {0x06a7b64af8f414bcbeef455b1da5208c9b592b83ee6599824caa6d2ee9141a76, 0x08e74e438cee31ac104ce59b94e45fe98a97d8f8a6e75664ce88ef5a41e72fbc}, {0x08b1d51d23480c10f472f5e93b9cfea88238c121fe155af7043937882c306a63, 0x299836713dad3fa34e337aa412466015c366af8ec50b9d7bd05aa74642822021}, {0x17f485337f6e10fca0e385f7a93d1ac0a977e43995c3e4d9b8f89daa6a183f44, 0x05ccdc1561db963516da62c66edd39d1bb9c6c4674990c4440403c88025c95ad}, {0x0ac610b573e9fb98deaf5aa48feb447536418ddc4cefd17c277c852a2a02a413, 0x1940e395f5eeaaf3b73a54a9db9910c3b7f907cad7f55137fb0c3847a682d315}, {0x06b7c24035a06c42bcb47d54df4104cd8880f68263afce13250ecc65f7669d1e, 0x2179e38c6e6341d1c80b4ed2ad6d43188c01c2f70a8093b37fc02f9fd9e5f12f}, {0x2295215c9285bdc4f6beefdeccc5ccb67bbb9959f05f4c2a716a8f442fa69498, 0x10174283cbb851eaf5f64a278b0fe58fb9b3b0b6a31439012ebe8d731bcdf851}, {0x2b9cd0bae01dfefdb859f3fbacbc897d6174d717103bf3b64dc43276541a2034, 0x13b64ed1d986a508cbe5b28ca1429210b9c1aff6fb358af406159ff2773181ce}, {0x0b0543208dea7cf4a213340ea328fe41297a9adae0d846bdba6a63682164520e, 0x11fc9d481c85491a1c76370c03abb451edaad8d165909fd8bcef0b0523ea1598}, {0x24236c8ead13686698f502d88ced24d4a4f4d97d857f7a404dab22a7d7010281, 0x14f25da82adf5997cd262a35f883666cd8fb73558e864094f04cafd100d70121}, {0x042075949fd411801cdb82e636cbaeba5913ee29901d9294e4ec8016fed7de8d, 0x18cd5594fbf0daec1813cbbe6752ec1fc46f951b26c19031466364b772f37f47}, {0x1e55ddfd2bc59eed77164fe02d0232b3d497792ec225376f3c3f5ec2f731fcf9, 0x24b3e64690c93b37546abdc4ee90b916e2d3605eb218cf26ef5868d2b666072b}, {0x133b598ecf07b15b4badc0af8b67d74f574a29c1ef79a426fe1271e235e61e00, 0x065bab42b71a49a87ea2b1e39d69612daf58372130af040f503b71b689ac9b8d}, {0x15dab2550a7d9679f0a528cde54154b2d9ebd399a16691e13f3f28b17f72f7d6, 0x178ce9329c1a5914a6561c281c981810a1554be17533bf6e7ce5a03e18f67889}, {0x145bc328b9b296659851f12d70e35a9ca48cbde2af8a8ad8c9f2b3e0dff32306, 0x29556d2e78ac6045e5dd6d555ec184c802c9e0599a8d5173103841caaf829633}, {0x26e06be6332f9f22b10167247f35f7805a11658a38dbb75d480af28117a525c5, 0x05e492d706a927c51e6180228d8be86d15017d61160867d231101e2790e2f451}, {0x173562ccf10ecd0d4fa859860fda7fbd91089fa60e69dc72fafdd35516ea77af, 0x2ecf52567da025409374e147a7e63641b341b7b0e90104d86688d1c244890fce}, {0x1f2434b943605601a75d294aba1bf13f0ff5db8d7e0a3500b5f4c1bc41e786dc, 0x00262db6caeadc85809eec6eaec5a25cf46cc7c753a1e28313321fcdbaab1c38}, {0x03762e07278ae0306a4c00f906f8f2e4d59373bfe860160c0fd9c5e77c46be52, 0x25537898872f823d23934c27f897ad4f40773d14b4fd32bc0cde718aa9cb87b9}, {0x2cbfb0fe6c22c116187ef88cab54ae9612bca6cc0738379098e3f0c4a4ffe44d, 0x18e367e3d08db17ce4fa3e487e6268c2ba168da6b239a84bf2ea8f2ff0f4c469}, {0x055c8d5787694c618d99a4a31e6b68173176fd3ee152aa0bc009e99279a9b348, 0x0cb17a49107a9cfbe06478a33ba7e48e279bb9904ee0d6681cc72edea5b984e9}, {0x1f4465d62aac0c486d54b87e00f9ea1454aea3f1b0807c471fc172383b0886c8, 0x2fee931883b4bf0d0d2e303bc10317533e6c974d3d884f9315f8d78840e1363c}, {0x127b3ab3ee067a5c41553648568b7882ce8ced215bfa190979668b3bc81eb1fc, 0x05e5a09c5ae9de4c0492a8033cf035672a55797cadfc1e6860aab21c32a78112}, {0x035b261363afc5e03923315a3dfdfbc2c932d94bc19320f3ab411a203df4b44f, 0x057df51fa44deb6f13412a77fd4325aceec98dfe6036cf74c71a5675f7fe1342}, {0x154aceb2bad07cdc9e1e0239e75f74d2b63a297881f9adcb166edb88fe076f4c, 0x2f7568bf2fa097d86b7858e8701480e26d6d42fc819858b2137a427ee5b9a1da}, {0x09a6e5836835dd5677aa892580f15382da285a1b1379a67fd54d21664fe5681d, 0x29f5850d45dfc5f3126fd0da3ea2c23ae965655112b9c2771cf2e73a2861ac5d}, {0x2566879ca48921f6fe14df4d20d2f9e24024c9d438b131bc30b06efc35dee0f9, 0x2ddf0f6cd3e69d0a018bb01bf69ede7299a90eb9e40ee68dc50fc1b57f42011f}, {0x08c4de3bb9284981741584663ff2b08ad9fea7b6fd7f867f558d768cab6683f0, 0x0f9c2bd3727428ed114cd7860e28daf81cb9cb7dcdd26bb704dcc13b4314dd6a}, {0x0a9cfe416626f75b3be8249cbcb7f3732bc7601cf581f774ebea4254dd06a31e, 0x2f37ade304c81412d4ae613bf6d46db48b794a815bffc4413fc4872fd3e54e15}, {0x258872f55cb9b9d5085401f6dfd3ae97c4adf21c3f5a391ee055fbbd9dc4754e, 0x0537cfe016384089d64f027080a6061dc147732e6cd9c5bc1818d20ccf9958cc}, {0x1e46ffd3559b30f6d101a2b49be6d213a9c40979ce8cb6b3c30ac308259bb5f4, 0x08c2c33416234b10c20e4b8bf0a1c1af83b964df68eda56adf0dae561518f704}, {0x08d1b64842bc402bf13683a6c6f35b5c3d20bc295b2b29547889abb503000938, 0x08dd9da05595bb2f247f8254c0b5c522610ef4ff6de3397d6a35c2cd57d5ff0a}, {0x17ce741466bfe6b7ddd079fc1b829fc11c670ae647603cc16f07ec4ee9907076, 0x135c40e7ae971f4f02715e9eacfb0edd48544329e207dcd9e09e3a1d6a7ef9d3}, {0x2560de7ec1fce358673f10c20b44ad547058e357b6abcad273e4de32f8901926, 0x1ce0ed3c1313830bbf40fe0d7843c66dc5a67680004df9bac115c39ad61a6434}, {0x1d0ab19190a9eea7211606a352bc936d6605a190090ac0843a8beedb54bfcd60, 0x11013587e7511d4a0d9511b142867820cea6cb9c3d7a8db3ac3230521bfdbb98}, {0x0ce765d04f6147d2ec7fd6b47a674fe19734ba8732f9f5b2201fced57eac06d1, 0x17e32bc3032ce94020638e7d2ab3cb5ccbe6f0b06faf6821fa8e3e4401a5c5f3}, {0x0f4dc779722c9006a9c18edb82b48827e1620600ec0d8bf5ea38a9aff00b2fad, 0x085e58b989c3118da095b0e96fe2b07080d4a7a2c1e68b00de0a673d6ba338c1}, {0x2732bbe06b941c9e2d5b43837d8c5d9c23b7d9e8d5e623427ff3b61f2f5a5a07, 0x2b591b8a3c2bfe17bd639fc6a77244aa8629abe4bee101a444e4f24f36f1cef4}, {0x27e2e192f061b31a05a77bf2ef3197550a6a3d87137f94166ead6c6bc962dd79, 0x2d6ed80f66dcba2fa0170b308717dd966f6f290acbf61affd81681234c8c2c06}, {0x2b74bc4a2f94e7ee3305368999840142e80348e9464caef350c14219abe982ba, 0x28ece478e5bef9a805431237214101dd7e42d6619d13344fb5f38cfca35be682}, {0x22c175e3c8487841f7e95a1448695383526f6b54fa1bd5dc08abc316e31e3517, 0x149630c26a8011eff9ef41663b42cb704da419e23b884b7b24414a6561bff9ab}, {0x1b05155447aaa6fa1ea292a769950cfdbf195dabb8101a25902b5da432322076, 0x10575afe16844a09fe4b002623c91f29e52bdebbe29e235f2090c39a930e8c2c}, {0x2a8577ed48db5ac9e9fa8dfa247f27b3e60d89f1827647685799666c97f1a833, 0x0902486bd83fd098aa054ffc4cb97ab085cc2f16ac36046994cc30a023107b1d}, {0x1d9a6be49fb8d2ac15dc3d5c94e14a1503ab0b3ca6a21cad875d6b1a79faa9ae, 0x28026c4fe5e3beecfefcfc52d868ec17888e6b9e926ecfebea979f4da743e98c}, {0x0732fab1b46a9d2f5d4e4c0ae76b33d747b97fd120d5a48b403368c0ca59e3e0, 0x010ee4d49117fc0c55faee5550615ab0e2020d1cffe21a9138b45be3861386f7}, {0x1781ee986bd68597bf4d4d208c4288599de61e144c3bdc0400d099816411cd05, 0x2ab3082b4ee85457502bfd2c20b89df4181ecd32aba9f00d68a92d8f081c1846}, {0x2ef769820679d51c8ad33309549d630a069c2e0bedd5f6408bc7932f8bd47fc8, 0x06abd56e6a2300623d6945f2f2e965836e0ea9518549579ae5626fbee7a98b01}, {0x0c56565b409d0661559f47150adb952432a186ba0c316d0360db359b32b7b05a, 0x1d312504121f5a89e8abc692156492ab42ade35fbeef59b84a720513f9407f51}, {0x2bd2e4fcc5e329ac6859e2bed1443604639c50181b461499a1ff41d65948615e, 0x0c6b0aaf39ab436c4d8245cce97c862198c92af61bcfa8e260b78f8b3125609f}, {0x111e14c693b4e2f022cd64a6fb0a9a2c30a43eb830af2d536d47d65e31621b35, 0x2556301d79a6b88a9ee4e0c6c7cbf32c998de755f5229cae477b9ae2a688f6ea}, {0x061d62988ebd3a3a643e088f5a5117b03e3342eb44aeade5be5e769c8ec5471c, 0x0fd8ed00f9e0d1a9b4ce715d06e3a592a38e60e80bc6102764a208f72bab79cb}, {0x2bcb97abadf5cc9ebb2146867d6f7451db29fba33dfe8a34ab680dead115e00a, 0x08cf030bdc7a851154cdcd01609d064c93b03ad7808e8f306ab488261db73320}, {0x1d174577a9c53cefd85d6bbbdcb5b8f292a884b26f0ea403dd10db43ed6f9a8b, 0x07bb9915573ee3bf341981f4905a2d96167e228b90c8d9dd430530574cf75899}, {0x0591f4466b7a4ba962d097beaecdb6bd8d17cbea3bd5fb9cc8e166322755869f, 0x1b1808e9fc843a9efe02f7493cecb95c608c316d4ed98f194003ca292a8bbe89}, {0x033a47533babbe960c581d996a10c697efeecfcd62b36b6124f5d3c793348962, 0x2f7a4ff5aaa8a0e2cfca3a1401601a52b80aa7cba4991b380f429d26d940924a}, {0x1425b11b4fe47a394dbfc0ad3e99dc93c3e1c0980b9bcb68529ba9de33dbf585, 0x168b8cdff7ae7d084fd111608fa03e018b415fd4f0755f7e8f039a2d852bda0e}, {0x01281e1b4ae3aa4404c0181f688fecb6c0c4449ee646c0438702eab87f4b7dd1, 0x18d37f7e79d7dfdd82187cc71e706ebe6353499493e23fb8ae536e47db8ce60a}, {0x03fd1c6811aba796990bec7a6e1c93456bc73bd41b090d6be589826e49b1ae21, 0x269f5d44435fd8dea26779b7f46c23b4bed44fa1d9863c9880f010959bb4aa88}, {0x0ec6fc4a5b4e315512f882a012443a460f0ad440410931b3d2f16125b5e08b17, 0x13d2044189630abd18c6a3d7dad67c97b771597be79693a5de68da0ffa2676d3}, {0x1fd5ddc117799eac4054d556ea4dd922ae145542d5524a29a0cad3ec7ec810e8, 0x27bb413910ef0b9339d3262cde13e189d0b2e64f0c073fc81da5747676ca645e}, {0x2d1b7db11118809263c79240df010a2415abafca8d4248788158bfd6f2141969, 0x075158f7b9c5890a51d5b46a86e6e3f04f20dc8cafca5e5c3772eb508e2390f1}, {0x02dd2737976a05341def306c8899cf11d24b52f3230f36b6cdbba3fb971cfde1, 0x1a15e9c72c124e695b6fe0c535bc1c0265ec884cf74b53de358de6d5c956ed73}, {0x1df18f1f725582b96a446cd7fb021d67a357626fbc37e35599ed2d117359d294, 0x2110263f391b92233267e75ec5641be7385da935a46f8cccd0698a584c70848a}, {0x0457cafda1576b6f5fea6125056e6d52c4b01de7b44ae5aae162e83c9fe86928, 0x16471c8dad2cb3ea4c4645d8b108abfb95fdb1c87485a1d78a3d158e529aaabc}, {0x0a431193edb58abf0df45b4bbd6cfc43bf2e39093ec0fd195f3120344b3ac3a0, 0x0b1261fe08f29cc99a084cda6e12f384e7a11f3fa0f75dfcd21005d951fdfc2b}, {0x1542e37f2c64d816c9dde4cdfeff540680cc90b767294ba9937a0de230676b4b, 0x1717efcb51f08cccdbfe3e4a2da92e000a45a3e3d9eb40f9b9a2041dcbf14d3a}, {0x0f39f1ee90eb802366254bf2555173a1bd988e09f8c5ad7bebfdb8d14d88b064, 0x2cbbd9234ab4f9fd74defb1512b86385b038ea5ae995449b813235e047876986}, {0x250a8a1b9edcecc5f25879262ef2962fdf8499f60e8131c6c33320fd8c98ed15, 0x1924e2b0b5e2c49449c5ef9b62c2d01207e012a0bc70b219ab44f026ce7e43b8}, {0x239aee62596123c53859dc2937ea9257e52034311bb81519b7f45330c5c883da, 0x151f09f672db228c74304a2f68f65a7b586f93913b97b6d7dfd638b99571b7f3}, {0x1ec491fbe90a222adec9c417cd9c39393bf0e9fd4618f8688f20b587e10a92ec, 0x2ad8de9952064d982be63f71a172dfddc4daf430bb5c7a0c0d3a53ff776b8474}, {0x2e5001cee2faa644502bbba6bf6b07e3b7cef0392326b48f300fc56f6982026e, 0x180e823c991af5044dde58a9e671fa092d3ba5db98cc7e0376dd079323f80764}, {0x2715e750e68b52faa68b293da254e1b0049b5825804f4c2700adf08a0214e529, 0x03921d1862445f32fb5afe510e7c4e23f41e4bad15c090b1de77447950003fc9}, {0x0b4ae2be8e83c897e6d3aa46f67058f07e0d29edbe4eb1b6c1e325c737af51f7, 0x0cea4f5b9bc8e843c26cd4e67da727fe9cd09ca8e07b60410602c63c3b0baee6}, {0x252b5bf255b06eade647646139359221099916d1be9aa6a7edc3f7c9c6b3baa3, 0x12f7f9b3871cd66f99e976138eedc4faaec30a67ce3c67d867999ce814f7644d}, {0x1977739937a75442ba424943233bb2ba55f9d4c62148285873a658581d5114ff, 0x178ee53b5e50cc2078544a9cbd11841c47854fe604388a5defeac56ce805bfe6}, {0x0e6581bf922d94d7079fa4b753f3ecedc525f516643a6bc894c5ab191fbf676b, 0x160642bdf146cc3f6630cfa5c115629055ab653c0e7f2414391f22b25d6720f6}, {0x0d4da3f9398685005d391d7c328ec8dc2ecab18c7d451901725375b1c373d860, 0x1609e3ec29efd4abf1629be26b772ef4b8490bcedfae621851e413e84c513135}, {0x03a781e0964591a816d07c8d6aa23d23b2ad50ae3acc529f877abf4d13e3f35e, 0x20a1f12ea58910335687316cf47761991bad8f11e109095279c05e14b370c876}, {0x02db5bda50b8b265684bb6e9c7af58513e9aa23abd3fa2a3cfc88dd057f90bef, 0x103c36bd9eb69b53205b7fae6224bb36b5a50451261cf87128953b489594b6d8}, {0x0513dfdf79ca36c0d5e56de067033a42d9e13ce86f261d9081a2dddbdb88127c, 0x02902f0ba36cac9e8a907ae91f2486316258b0b9b3b2c5262ab965004167bfa0}, {0x00bd86fa4e2f2da10f54c62d2f996d7813d6548785f88386b0286ba719dc973a, 0x2495aed3ff4e37c6d20a260f9847fe15d2bb5c2b788454bbb6e450effafa8bea}, {0x18f64e4337ef0a3732be36ca6cf72393b821fe4914ec78b311ca3a343ce7b15c, 0x0021c0913ede0f09b5920b629b891a95a30aed5dd6001eda274649363d1877da}, {0x046cc874785e387f35fbc3278c63a7d66e89f4642ab9056ec3d0b8d26eb21ec4, 0x1b759ad99b33626516327fbebf9c232e0fca6555b084ee311f62366d7d5f86b7}, {0x064fcc679f04e762d783f5b39e9bc9832d06a6809d8c101a216431f1dc792cfd, 0x216690982d703eb77e4ea5a7dd74c7c00fb98033d17ec825ca4950f6c40aeb80}, {0x148b2e63d2d3d87f364f35c47d7cf6c006506cf224aac6f208c559a2ed58d834, 0x2727c32af57debc90f6fc9eb1607f72e8180068d6d12c02c38498ddf0a998506}, {0x213b9a87905003543236ff3eb6b232083378cd7a9eed91eb78f2c60fa85a3ad2, 0x28e04e92b62096e8d23915d545982855c21be5b3a1193e6e34c43db01192453b}, {0x2a4825bea894ae814c1678bbff2fe7c99cd63a77a0c703b2825a5f19b2d98fad, 0x2a127b6261bc7a4f6e76e082d980d0af0bd0f5e0fd9cdb342bf9bbb7694a929d}, {0x2257c2e4b41831dd8d36aaca1ab106c26c796f1c8e0a2998431f9d4125d740eb, 0x07b7ed1edbb583f469367ae24bf8e49c1ff6731dfff4abf92e163e595187203c}, {0x0a8d78ab8a1fb7388787eeca33f3fe251ae93f28ac1fef89dae84057b55436ff, 0x1aef7bd255bab9ae1a74c2b7cb61cb0c22f8c6c0a7da5d9d4753779f9fc3d456}, {0x1bca13199961ec30b02a2e464afef42ab60ef11b26573e11e22a1028afacd288, 0x0ad9ff00a04b9cbebcd54d75a6db4c6042799d29bf0e0d0fae7438c89233850c}, {0x06236320cf783a01e2b8be7816a84671de9e8bebda0e8f957809ee1253565bae, 0x0a4ce1ac405b9974e4eaf9342c2a43bd1fdc4edc2bd18235249bf51ec4328744}, {0x107a0928f1bbd09f3710ba91ea9d69152e2a2de8eb21984ec9caddb69ab37a8a, 0x28c0d2c1d2b4dd590537fa55a7838a2bbd7aa7f2c0e91b36927b731752c34192}, {0x04c02961cf949cd155f736fdc4c29e4fe409c37994aef1b16cd170cc65b1b2ee, 0x0a92da6a165896cdb685afb42e80bec10097bc2083bc938550706fc5bc355795}, {0x165aabcf0d07544d16f06389ef1d3bd5ae9c4bdbb0f53065b64bc53346c75897, 0x09dbc96d154f3fb8324230033265a8d5a31c9b88b5104ca5f56c714ac2e6a534}, {0x1bafc8265a8fb16e346e57060848c3ae00b0e2d8520ff8d287cd002705c4c1ab, 0x03a87183d670bf95439912a7fce6570c957a4d5ecaa722ed50e7d7c55dc55d0a}, {0x1b5b281facfe95fb1144e0f7d0484d119ebe0dca0355e63ec70e5f94cd64e3e9, 0x10e9c2dfd3e452f067fc71c60a08200402f8f4e5e8dad63e462ba1597a20c615}, {0x18dd61a6d1a9c55b35d048ffb667e7f05ee657481bdb86800e89aa48df541143, 0x147653157294e50892424edb123ca14f08ae7da80350b6ffdf582aa7a939e371}, {0x24fe3fb77d48ea49e4c1b91c61b634dbd9525b20167226b19d7c603ac36c3d4c, 0x2a4768c15d9b9c746e253eb271b28afab89da5412565d93c6220a5b14cfba611}, {0x119ba66c94aeb05b2309953c35df696ce195bf7d959770bb9b99ab944db0af91, 0x29c96c201b71f6540f084e2fb6d4eb8a52b940c0c5585f258aba521311b805d1}, {0x15856673ff5b68543c671cbe735d53376dcfea3eef0ec5fb3a1ae3c37f5683bc, 0x012224ed590244e93f1c6b7abff01b64dac0bb8bf14ae8e3d825322b6623d082}, {0x253ea43ba2e8c14da0df002c96422fb3234310a5774d8ec6cc9c1796df1789ff, 0x234267257e751a5fcebb1e295b774700fcc16b5f270ac8720f4376dbc18281b3}, {0x2825afe1d583957680db4456ece011c28a7a5e2021a69a1bdb69707d944268e4, 0x2870101fe628a0d69a362a7f52d4f57093aceffa7aea51a4544c3033109a05f9}, {0x0f29f472f3b04c24a5ed6675f5ff33720a10826fe53cef56b2c9313b2bd31523, 0x2483c78fb7a925e79bf63bb20e9198e12b41429b23fe8e2ce29f91f1112159be}, {0x28b2e5fdc60e4fa83c1fb52db348434f08b850cc205f98431deea3e8fe209ad8, 0x0fe1ae72d3f07fef610c96a45cadf362c41f3f902b7b81a735b2a98333f54f47}, {0x2267c8d0582c04e9568e83bb9155fd9fac11d9c0672455f63fc14112297855da, 0x1a13b6e83105beb7164721a03aa0635d2214c68c0ce68c5737ff618f02f62bcc}, {0x2a3e86af529fb07cadac27f9eb5683abbdacac22e8e55a4b96c61249cb3ce975, 0x1eea66c26412cd33e47d7745aa76f7251efdd09bf220e09889675d9896bd1772}, {0x0c5111956406a1ce31b50a0d90fdca236871c353e3f75250304b08cef557b588, 0x2b4948845ae79d5803bc258bcd951d476247eb24ebe416a89ad8fd9f465fe8b6}, {0x2854ffc7b3e8214133feba8d6eb09b263690572a3022b7fcf2871ab9219cdbad, 0x0106de3acc6519fe5e79d178c2c86abded16f791c8ef4d9335d97862a68f5590}, {0x24c6a00e705db722a2952db86bbe7f08cac7b6c3b50d023f24a3de1ea736074d, 0x0dc43ed6b87676e8dd55e167471a55f2eef0968e310767659123e48b357903a4}, {0x2644642ad942cfbd4736a0f7f18fc0197e029521ee087615e04a49e5f8fbb66e, 0x22b30468bd6abb89a23a5dce7e57ae96e25e0417937368f6760147af32c7a7ef}, {0x139bc1dd75b831294bf28f4030675c0e05ab4f44f87a639b04228814b6cd5531, 0x18c670606f2e48d361c347c0219ae8e678759c0b22c01a1756b6b0e3c679ef33}, {0x2699eb06108602cf13980e2b6e4f48c6d90f46de7eae60457e4d1019a4f3b9bd, 0x0626c5f10d9f788ba433f2be9ac352b4298ecd2cea3cfff1e15e9d48fbaa113c}, {0x1f4479f765ee101dfedcbb07e9033604da94dbbe5b781331484321af5b253dcd, 0x21623c9b390babf2397d31ca4af79148ad304a121ae5edc1723c994d2828f444}, {0x2855725b3e68975ebe53642831ae4d5d2d7b4b137b95eb96e8151bc61f1bf053, 0x0ca0e44e2fd18ec91840ccfe99c3049de88d1cb70c63633b7aa4416b92b0336d}, {0x136dedcff58a79ef53df43747ab531ff7d38d5c7d2f7a6d652f57b415b808c10, 0x108956df051470607a649a39f14ea5cf95a904a406ca3123eebe60a0eb4300fe}, {0x0d744feede2a6bd63f61403043b33f81f56a61ae58c43e8b771ee0cf5f0dfdea, 0x07edb65778a0aa859b8947ef31e601c311b25aa1bd2a5ccc3225cac13bfc1d18}, {0x23ecd41f06eb8051f907d416c36a9a6691dc87cc64de02261c7eacaf70b82beb, 0x0caf2de20986119d958e6de7c3f6cd4f8b38645c9e59a12f46003aa5625c1edb}, {0x15b08db406565282b6a0d3fc8022eadd2b61a559f3c92cc91521c45c6661a82f, 0x037803c869368190f0443820670330b14439832989f2345a36e5a48b2c59e543}, {0x0e1eca77e1fdfbc7a151ed32732cbbe093978b5d8724324d73929a30e58be078, 0x2e23a2f478eff00d8f0c0d7ec3c2c76467aeb2ca3d26ef49ed19ef1a8cccf8ff}, {0x0e16c46d7f01cd14637900379058cde52352483f90eba6350dea325a183e4c8e, 0x2bc5983fad220b58189c50be25b200c54e70d0529e3dc96decbe801f0420786f}, {0x1ecf556e4ea1a22b395060ed7c79a79ad9af43103b935caf9d410aaf61ce4e9a, 0x1ac123a28245de45fd811267a8e343a1b035e77aca8b4614d09722caff12b0eb}, {0x1211f23e5e92c74a454701bf173aaf1ea12f7042e85859c468d94974eaad551c, 0x165d5f2fff807855a18513ebdb932dee6bfcb8293383f7b7bc5196d737053f73}, {0x2b9fcf34bf541a48ec88d66cf5bfc89700211ae76a79551757dfc50f41288227, 0x0ced96282d5edc9cbc32b1c16e750da8cf3237e07e3625d85bedaecfcd12c9c4}, {0x2f9ea4e44871cf87cfa80f71560253dc13ab58f9728495fddb4b9bdd11628735, 0x28dadee7c5d2a42cd524d8396f69ee363aa95f85c98c3c836004589b6d73084b}, {0x15530bd41a96a8a225db6640075aecd1884a06bbac5f98c51e5a487bfedc8d70, 0x1c86da90e9556705a7476bff65b8f53425e3d129db8f179ad6e4b033e0495a20}, {0x0da53ef60fd433fe0ee377bedc0e2f7239b514bba5caa80c52991c619a029559, 0x1e1a37d1bf9f0eb8677bb0fd215c26cecfb350ad226f42d569bb040234da117e}, {0x25d8a9ba3266bd80af59395320e940663ab8c05932a4280b42bfcd0ec4f69d62, 0x2fc95abfe6be50f1add78a03a9b4e60931ac358a132ad5ef5076c4894fb14aab}, {0x13b8fec4a1eb2c7e3ccc07061ad516277c3bbe57bd4a302012b58a517f6437a4, 0x224d978b5763831dff16ce9b2c42222684835fedfc70ffec005789bb0c10de36}, {0x2d035cd6cd9ca06a9aecee6826e38a30dd6fa18a9f139179142782803a05e6a4, 0x0bcbe75d48af9e7d4a45ef21e0348411bdf99be154fcc82ecefc6cbab8157291}, {0x1096e761836e74c5c654df817b4ace41e55cd812e97d2d0af5e2ea6f24dfd392, 0x21ff527613e48f4a5e3548af70ec2c1076b85506cf767aceb570ee83983ac6ce}, {0x292c4a9ebfc080016a973ac9e24fb4b356c69db30308202a31d0bfb2e85443be, 0x2d378fef5d7b4b008da52d0c98bb8daa702109aa7d5da477107d9f9559dd6eab}, {0x1d316fbe5c0ccef4caf35a917244ff619d92d4fbedc80b970205508e4b570595, 0x22b85bd410a73800d3610f05dea0bc7d82960d317602cf44bf77ad8f8f254f79}, {0x2c961c9d2ad66f1049fdd0e8d7337e3449e8774836bb9981b56fc6e7385cd7e8, 0x06bd01a16056ed018b2394a0ec6897cfbeb20a18c606b0d78bc78d1d84a6b892}, {0x2e8a8414affe97ed11410c27ac23b1f54b6a621ba39a9fd7f1685f9db88343a7, 0x1efbc6e7cb379b246ad9278606ea10b7c74f52769c615cd67b833c5016ac7db4}, {0x2ed01ed41ec147ec1eba42d4b3c921568944e9a0d8a498706f99ec15d0ccc511, 0x1dcc8b5251aa1008c792ac420bc9be5f1870042d0210ff8ae96804ddffc721ad}, {0x194c79506a89ea907a1e6777926f317f7231ea49bbde362689477b6ee04e9613, 0x026c94fbfb503010b9cac6a4b4e8e5fe29553e60128e05cdbf5546cb7bcb34d7}, {0x0277ac3a2889cea8febfa02110307c50b7d8da14e50adc4e86dc8d0aa73251dd, 0x17eb791abc2495f664ffb38442265281a6f9a91c6169ec5a6e7365dcd3c64871}, {0x0d3c84c79e806fda93ee88a7887b9daafa47969dad98217ab2bc82bdff4fbc25, 0x213f847ffc2eb33fbb7a5fe6f9e52d792095ffd8c8ebccc3caf9ecfd610cf1b2}, {0x21d9001150f189e28d9e194e98bc5ac761eda5d600d7ef517983af606c5548b9, 0x1e2fff3d9cd1f421a57ff2dade55ab4ce3b4628a60480cce558d3a77b8fd5227}, {0x008c4343a41a1dae81a6276852d405acd87e81ff4b1d190482b5718a6e31a761, 0x12b4ca0371b8ee1bd20a1d65277bab81e59f6e5ce60ccc6b82c722cc29d07fa7}, {0x2bf8fac78021ac7b2753b1ecb80fb30160b6b3250b5cf0ec9ad46f7801e759b8, 0x2c0016acf87d3833c0fb9709392747265f4202151c050427b3b5913ff39de477}, {0x1cf7146b4c1d2ea113417938e790a96fe811cd3dfef48ddf27dcba7cd820f6cf, 0x2a5ed72cbb62ac7046edfdcf9d1b47368fb3e2291e1e85e26c4e8cd35e401ef5}, {0x05e61bbcbc655464ba1fd215e04fcf949939de110f05722431cd5084968d6db9, 0x13e15f844fa2767fac2daae3fb818e93cf95082efd681debb31574defacad671}, {0x034bf641f495a59e3d28dc3163a1c74aec7f7ef60030c8614c193f7ae2281a96, 0x08b45e915673d26d8c5c5258a951fcf9b439d6833e12d2c301dc2eabe23e3f61}, {0x2960a0634103632555b7ed048b833d198c75536bdfce550988dea08d1b2a4b69, 0x1f29d4cddfdbbb9a3aae3c862def08730c9563529b888e065f77604d012c194e}, {0x2bed31e2b3ee10fa9cfea431196db0b201587e2e68ee74dc466450053177c5fd, 0x22c3f8fb3346540004df204600e2a60f2b5232a3fcce889962561e1c98a80146}, {0x0d452f069c9eb613854442c5e9830fff0cccbb7a0c37bb8fa9a81c242933b54e, 0x1c8331a53da629b28d02f6ba74b52caf67c4418e22fd6caf57d627e110451251}, {0x0f055c21e2d7e8617b71babc6b770fc9a7ef74c3913fcf610d599414096b700d, 0x1ebeb82f257db891825c55b2c909f0210dbe84616c0f5a867aa9f380a9171929}, {0x21907afebc2ecfb8c7c376a0db9958b35a6540103391efa541a28b82f472f48a, 0x27c5a8cf6fa01b72d31ac50942838b8362d01e25c82b2d9c4a0f231441de4197}, {0x205ba2fccb49fb5023e5114f84e961b9237b49ca8f5610bebb995b33ee249369, 0x0b388977d2e0a8fc0e63a06375d9fe19fc7b798b8b0f2c8b0885920cb5bae45e}, {0x2bb165ee76d92f26bdcbd9897c6519b8d89eeef2efc0c9521497068c735a54d2, 0x152704fe7afc78056ee79211313a0b23b71de06863c6102e0f8daefc0f2e85df}, {0x0f34d4d950bef2ee3b8e924b0183ca4e00aed6ea9209bc37c4e2202eb5bd7666, 0x0d676a2dac5fcab3731af3283d9c22989889fad53465781a73ea5aa81274798b}, {0x042fdcaca97128fd28b1ca4c90eaf39378d673af8d9f789d33b88c8284c1e4c7, 0x0c5f60e7eaf108af711035a4ca219da7c7926c882d40373d76d9fc5dc05bf2d6}, {0x15f74bf25691e3205d87c4ee7b798f00097551d1a14e732f8ec16be2c2b15424, 0x0e917f31facef054212b2376c65779119a28cf490a506e66d48dd45117ba7cab}, {0x08bd6a57ec62543e02f6fc7d0c3e832c7b7fc579d180a91071faa3d3ee9419d4, 0x1bc48805b6f1636fbb3fcd6da38aafead46d19c009893b19cbeeeae7937a68b5}, {0x0022d27fb14085110cb59094144fc0b73878d88c64957112740a8559878d34fc, 0x08e1197fb288dbdfc3c45e74c7362e8d24eb51a66e6f601e078713114be490f2}, {0x1b9f573652906bd22ae891e98f72b280aa9f086974561858b06e57325bda14db, 0x12aec4b8476606d47b077de794be45c888600e94486a93b3560d82c80bc5f8a8}, {0x2548e5ca7207fc244a56030fdee8726891f78b31b786050b01f535872604fef9, 0x040f0788fad8ef4eca110681d934bc1875cce24d4b79708f50c5c5ade76284e5}, {0x08e2dcb5d0b19b7b0fd7b371bc43c5756f0377132cef98df0db4dd9eb393adca, 0x2fe5e5ea9fb4e811da5043de233b0b4e971da2dd38941c5033de0afe61e945b5}, {0x1d4f9e8484dadc0b72b38138caad649253a61a9bf5ad2d9afe7330bf839fcbee, 0x09bb9bbafbfbf4038ee64e73ebbb0975db22edcd2d1c1c6e83eca2672fab780b}, {0x0fdbf5656758cf6806e65b7800be3b7c039ed1fe181a0d4b50fabcec79f0df5b, 0x173a2bd7eab80c0e2c4cf6abb5b659d289de53889c437ef553167ecfddad034f}, {0x0f1ca7aa3dd35f558481ea63cf19d446200c77835c45c63954770ad12616dade, 0x06e0f716d88e8041c0021dd736593a6a3fa501e33faa9a6510b71467d749498e}, {0x2eb10a9a90309b08dee4cfa8070265358c54b21572d914c9e8fd36a959304d24, 0x03b4ec52766ad398c08539c6f8acb2b39874f0e0b994010efa873cfdf680a88c}, {0x1b94be21f1fb7228d3f3d44204f4f3cac13090d7c5c2af9ac82f0475f5cf39b4, 0x27e9d41ef829511094b2af4473637e9375eda5f9e914cf55aac02d9b4a969755}, {0x25710e3a7246b1e76b8d6fbe6ff44afd9fd30c9585351398c15d050238d3c2d6, 0x01c855e42168e00cd947df9d3a268f0db1f8e471f730ca88d84e1c2de7083e4d}, {0x2b144261f16985c75bff2b9d0796d0bbb63ba9c927669e3839710eea66a8efa5, 0x2bb766bc6b62691154fab15cc24ce09d7d0a86f180f7cfc60b459ccfe2bc1842}, {0x26b93a6de603f0cb5900242713c98a4690d087ee2701f953c81f562a0bcf691a, 0x1f275bb2c0d7f2e06d4d3d7718ad405914e62af9dd182c0f3d8cf5bd436ef483}, {0x0f43e8a6e923598ab55483d1cb864aa57273dd9173b898daae6c753e403d80a5, 0x14351ad715d016d31bfa656c62512aaeeaf2dcaf8918bb24b379cf035722757c}, {0x13971d545d04b5639a6bd48a583d0e02bd46b717ae6404589d09ddcf8e0e1664, 0x0d9e7a36118a844d63b5778975a157e06f444516a730e37ee575079115e1a51a}, {0x2b6126f3432d0ab7149133ed284dc4b8f4c690a15d24a2012df8eafd1e584102, 0x2ffed8dfeba141fb9d2ec5f5c4ea602a5dda428b2adbb7fdb83dbfd3cbe3ea36}, {0x0f8ebff21f4475980919b8bf3a07e2bc3276c32aa8cc9be0d2b9e6ecda1eac62, 0x2d5d4034ffbc3503e76dbfaab4569192bdc22c3297c74cbfc9faa36a1b168a61}, {0x0f89469183d268e35a4e05882dbe1a6718f5246a18948c8bc421b21e2a1a8f90, 0x0c501e43476b33ec702b4a4cb163b64b2077f52e73fa21cf24c1d31e96a88c87}, {0x2a49dc5c6e7fe74ff00aaae703c26fe0916b22a76b66f11eb2f1c97a145c2fb9, 0x0a3d9acd50d6e2f9032d7708ffcc17a60ba20f887efaf42856b039cbc0a32483}, {0x195cdbddb30680997cfb2d5471c87c76f7cb4e61797ef85ec2c6f2d883b018f7, 0x1bf08f1d94d1eeb02f28b7a1ae77f739697de40b672743de45182203b0fa20e0}, {0x19d00e5a8576bd737351c55095a19e59a94e4b7ebb3a505c54c194609719ff04, 0x139cd47baae2140ee687714a64063dbcd8ee9c5ba41e8abec89d55eee1018d16}, {0x2f9e7f7800c6a9c653f48d4636d9dfad6e122c48c2ed4ad2e59551956563be7a, 0x2414da5e0cd90394bd984c6886c3b7fc7d34a8418cc6898578ec0540d1d3bd48}, {0x2b2b8f5e7f644ee1c00937dc227da2e3de69762726d86036f4807b6aaae36c31, 0x047853a419bb6b761e2bf666d6ca8f90e93ec84a6e5b425d5b74daf76ef9ccba}, {0x17b3259210a9a0e4339a3fe1caa896e56306745007e783373d47fe37c800b974, 0x1ad16b73e4b32f988f8d9eebbee03224fe7bcbabbceb02973cd2e159c3a58e35}, {0x020be897f06fad7a92edf423db7ed12cb2bd2f6cb29c6bb8c6e394ff1aa3b3e9, 0x07958a3fec65b6df34911a018aac0fa72ce89d92ba4bc67dcd06d1b4db184b90}, {0x0253eba1d7cf606254ed9cff7613788a6d055495b779d9947a9cf46b9c1da311, 0x1cabc4e498a23c3f5fcfcb887629459666b7513ac8c70ee43be83a8b4f5c4090}, {0x085fad322fc02ef1cd3e8473c56c6a1a26ecabadccf845a914d79c83beeb318a, 0x03146780190be66eb78f6d6a2150da305d044739434f4d56ddccd160dafd43b1}, {0x22c33c8c594bf804b9c5a96835ed929dc99711327d5dc3723bb2bcfbb56f7fc4, 0x2bc57d10207ca4af29f3a0a8eb864d8989e89371936e4544626fb999bf7a4fe2}, {0x225fdab8fe6cd876363d27075cdf0d01c209da61b1634b574a5d811cfae40700, 0x1216b7c3e2adc07c3bef31771c7bb9e1d02f07ff3a5b74953c4fd5bf9a7a6dff}, {0x2a365a9299da85372ee0455de645cc2330e4c315d6250e3c0c72f10d77ac40e4, 0x0e54618ec8951f6b8be014e3f3bd12802b037ac48c2d0fd983f2343c5759c3db}, {0x2f31ee57ec760885e1e943c7d1602bff848dfde5cea6a4edf03476ad213591cc, 0x0bebf1d735e3aba48854ada67731601a179cd76b2bb690e6aed56a2fd963e9aa}, {0x242a698649332113b115eb3982fa5e454576bc05886f71489a31113fd737feb8, 0x2e98af3e21c2fb8ecacd092858dc5ea8671f81867d371c9b1a010801ced7ae94}, {0x0de2dce497fc378cf9875ea34483653ad21b40050a2be9f32713978fad365b6f, 0x18818ed119e67e54970494ba4f5c5feb75fb8047779f910713af5793062885b1}, {0x143a5a6a69b89a9baf10bab59c62ddf7a747a8439541febe0964e2ea6e35147f, 0x0ace7c02bcdb98ce30c3b6c4b9d399287ebc911e8d44226bab0c3f06c1e7e717}, {0x18a2a13576df7d0be0daa67eea762a6894fc88a47a4b5d26bf6af3c826c91677, 0x0fc68277f2370379225a32315a25607a6341a371091589edeabda88ecc3d2a18}, {0x245ca02f753e3dcae81462215695192bb8de0ee8a3c195c1e2f735fb5510c791, 0x22dfa007006c664c55102bfd2a79e5e79d89f3947b9f4556dc1ad20b80ff74d6}, {0x1ae696c232847d27e7b00f3ffeb36076d50514c4ee68bdcb08a892bce08f3ae9, 0x01396047d0e2300586624c149388740f5c00e7cf4a7213598d8ca634cb7df215}, {0x2642b0d7d17b3ae1c6c1ddc1b018ecff936f658d2acc47474a330c8d6cd2d5f7, 0x0af05ffe2aa2cf4f27db4fc64b9bdc681e15f4fc2bb57f6ce23e2e1f89003c72}, {0x29d2b27d8d6db3791b3c64b2f61f5b2ab00d7f1ebc252cb97a9896a83c0e5d61, 0x12a4333add04e8aad8478e3046268d23ed55292a96d7921460ce3d1f52ce28c6}, {0x252d6852ed68f5ff4420bf4ae9e5900a65fa7b2993dd3745e8dbceb436c5b94c, 0x21df15aafa8dbc395e66f7bbf004139eb5b5bc1bcc071d61b02096cabcdc010e}, {0x1d115df69be93cf70619b0f005a92968a5ee561161a3dd3cc963c243447f391b, 0x1555da4cf093578bc7a49518f3a49a24f57760186fd02a3eec3749ec72cf7ad1}, {0x2ad97c4b04758df61bf424363bd78665cbd24e20c13125ba2fc618312635a5db, 0x0f6b80288f228ae9b8cbfdb06a1362c5b4a4fa81cff38dffb36585b871ad747d}, {0x1385c47fcd92b51986c4ebf480519229ad13bb04255b24ffadf0d64a47c9c56c, 0x1b5e107ac4e88ba1f6fe66fd02dffa0211cf505d105647adf3ecbcd475e22840}, {0x194ed40353d0e3fb0983152b872766ae5f1b4843ccdf294212a22af910755911, 0x267aff505f0d68a76ebcb094b24df86ec272309368b812af86fa0bf390d148a9}, {0x2c87079e8db3eba1a27b14612b8f160b5a9452af0e76b942f61259a4119665cb, 0x0a26589e75263127c006b16e4c34db58765013d73c48a13c269b75e0fc34dac5}, {0x04f1cb752254ce1c92b01b10a5af73b1854c2c62841dc824781caaa56ddb87f1, 0x2511226c45e2074e814befca9728e74afcbe0a2dbb8da9b61497527f7dc16fc7}, {0x1726c1df54ad0c394c53dbb2daa6b525d5337201f18ce540686af4310676a873, 0x1ec01458207da40eb3b8483934f1281939e93fcbf8727a81eb45584ed2a3f61c}, {0x226c0947127b57567bc20c26508a688b2361f752eafe0072c005e589d8b9ef58, 0x2dcfd6b7a3cb9423a68ca27d4e288f84067d1bca27ab18fa9a7b1c3cdc0876c3}, {0x1144eed8752daad82ce8c81c75d13e91c2d8a1368d8b7aece378bdb8f553f7d1, 0x04d8b0b771a46ff8f2e0c18454b643f8908a5b96da44713263eaa0e7609149cb}, {0x01e6c7691756045003fd35cf5d449f1bf0c68b45b34905abd5fbf2d944251616, 0x2c808764b3c2d8ba8b949a9f00efb3bac79481195ca7e34a146e913aff89859c}, {0x2846b54c3b22668dcbb8cccaae457e53d8b6f5ccac2b48128fc73c254c5e59b0, 0x276f519936be5b3e2f91afc073e810e20473b09e963be92fe55aa82400eb9cfe}, {0x009ba7fc0c9257b32d14ef83b0b43ee1b4c875d4ddb70a1f8dff121bb0738d5f, 0x0e3b10575559f366d81f1b0076b0f2a8e57c4d11d5daba688a1926e17f22054b}, {0x2c8474246fb806dfd385f8358e4fe95f68fae97018d7db1a3fe43b670197d296, 0x2d8ac3b14579252521443a0709069529e88578810f1c6cf4167f595f17c301e4}, {0x1ce9e693f0718940f328281f33872bf77e5160c73c0a6068e8855e4716316099, 0x0869d2297c13d0e7ed693bb3ef7cf72bade1c34dc9936633b458571bf7231764}, {0x25ef45e9014757ee53971d76a5c50e5b57b3daee31af4be46c9cd3d7a382068b, 0x286b42c7d1cfc3387bb75355b59eccccddc593ba7c375c5ac7e8286ae03843e0}, {0x19bab36be51f69ef46db70c779126dadf51c2c4e31ed48a1623cebdce336b5d4, 0x2854d9e8b595428c2accef0239bd031a4a2f37d751f1a992daf66e653b585686}, {0x1cbc558d34b723ebfa07c9630c96e81c74576d141801165e4710b5b0262c84db, 0x2d4d9bfe1a7006a4eaf94fd681f467719a68a8231b6b46b496601a34cd8749ee}, {0x22e1b18187f92eab791a18a17bae522f674d76efd8c7188a18c9397350d25421, 0x0ad500831e4522a7fe456bd44967dbb8f56b3a7f36ac51ae95c3cbebd4e0ca7f}, {0x06b3c6bec4d1982470c5f1a033e43fca9cf142639d8d8c1e08e0390a4c5a7da4, 0x1de78da2ba6a6e08b0b7f5a22bd59fe91abc05909196640e50e1d21741a4286d}, {0x18afa4a6bf750334eac73d2f93349a25819827c4f2e3b42ce8144f0c090e1b12, 0x2bde7825dce391b931ca81ee1139e6d76760072c81ba53dd2db24ddc28694e92}, {0x28234f55a1ef2d10c29341f59be69a2090c49b57bbc64a58809d4d4b9a050326, 0x0f0d1a871d0f58ae80723f19adf08b8b04a9b11a1f0fb7c38c1dfb3b830939ab}, {0x1f87eb4ecf4979737f4ce5493a5d744349f50675c1e169bbf31689c3e8c04308, 0x23d45d0cc26f83da885d957417f958f48d15afe583412df36ff2c46b0fae6198}, {0x265fe341276ba4ef03a3e1632e3eacc3c77af43355915017604e3297a2575e0d, 0x2d96ebc6d29672f1fc80d5f711efc24b099d9e5805d6052db96dc6bfe58e8516}, {0x20adf422bb92e8ebca244338030fff6e5750b73e3b59bef4cf27f9b8b43d86cc, 0x046d604bb8ba0f91062a910941f8640c12fee8aed73e49f47364de3375b82881}, {0x1b8b0974839d00fcb8ce8411303de0a7c1eb3a4fee51cfc81bc5555cf11e72d1, 0x10f9785ecc740f71e35ac4bb5667d868c7e0f41d7ac008fe1002b98c74a13550}, {0x17804f51d82ccacb1f5c235f9229729042bba8586cf4439b4da2bf3ce9e3c6b4, 0x04f911ef9571ad0f05275041c06fb56dd3ae9d6ca9faf59a98329140274dd0e3}, {0x02fcf22a313b481313f27289a45680aaf8805fe788fbdea9964bee963b47bbd6, 0x29a1c6fa0c3cc610d930ef1748fecc57aae4d9b73762168af70432d5300acc6c}, {0x19d7f00e9da0ff3c5e36640d537dc9d8b297918680f8ef92ec5fb5c237e71d94, 0x2b1aaab94d44134f97e647d973ec4f5db5627e6fd219f3f3f1e08f487f0b088e}, {0x1f84c3be21eedc0a6f3a0e8ed81866d2517d1ee09fb86a51601354cbc282c9ae, 0x08b172a26e838681d0c4d3cfb013abf392141ee2f871903f94966ab2e7c67995}, {0x1803f42b6154c73df3776a86da598b72c820e0a39058a6272c97ec432746a253, 0x11e4372b105bbbc4ee89496343eddd5f299ca4199190455953e6a4d5d0331172}, {0x13b103f06dec9eb67eeb1252f52e8ff88c2164c330742569ba6c0c1d79b43d58, 0x24983f8c5d29be49c03a61673aa24b73b20f790d821a1832b61276203854ed41}, {0x2e1389cf976ee7d9ce2992c62c6bbd5268b1096f6e89c6870c25a4737c154fd4, 0x2026565add482c9e333bf0f03cc1a0e6de8a45e2fcc79f298f1588852ebc239b}, {0x27816d71c08ddc593972e5d647880eb1c9fba52ddc130629a4867ec559903e7a, 0x2d4342a5b94a716d13ddc4e034263d2526fa8f9dc4672b0490d326a0b2c24104}, {0x03e8748e8aa834f74f78325f4cade8beb5b2cd987e003dd2e01ca1e507b882ea, 0x14e84a9b617bc3bbc51c7580aed6af624f108084aaa51c57c0f6bb42966a06e3}, {0x2e0333e017005d5580d8f37930910e83a4ec1cbb81513d5c4497e07bb4759ac3, 0x2efa0d2056e33484bfd0d28038a697b52071ae3daad55e734c4f1788be4e26e0}, {0x066dd4f74bde89af1e484ee7999209deec62204f6fadfe137a007bd1b8a41322, 0x1fafe097739d80d7254bcb0604d47a42a19606e61a5c9464b74c343740615c6d}, {0x0d3abc9d71dd3d76ec536fdd34c3d535ccd3b2c92e344b04ea63e7a95bf1d40d, 0x004e2d118cd7c19f8b38b28570d982bdf9398ec57fb2bb0d7e8f31e4c8ea3a7e}, {0x17a6c2b336d61bf255af78c33a67cf1de2896995df7e83f8241109a184dbbea7, 0x123d241884de16c8078118cf8168546668a7c354c1aadc61505121f1c69318ee}, {0x0a86bd18c2e2dc328a7fff99345d131988bdb003f53487da1d9affd07dfa4caa, 0x270232b8aa979307cef134be75f5d025d01c3c6ba2f66499e3615e5b2dd00781}, {0x1e355fcab47dd4264a85652319a0dddf1ba3889eaaa9e05f21247e4202bda1a5, 0x0d60a88eb2f714752b7aecdeb65939828faa6e1e38e8ea1606a7a15e71e7a194}, {0x1eb1ba9d3cb37f1e320b57a13707f1b4b40333e1d9893d2d9c6012f5667001c9, 0x0c1dea44b0e7ba28967fe607c50f983c3bdec527612e81245029958308f7cbbb}, {0x00dcd731a87dfac8e27719ecbe1098c415477febd6f06a227fb45f0b8b0b16d9, 0x27218920b62eb55167704aa95c9929a79ead041e57e1f26d5f2b3affa474655b}, {0x3058fe52fd5ea77191aba39e84854d7d3f317390b1d869536d81544fad1a7e7f, 0x1f64fd77c47fad6766218a0ca3e9b34b6207ed59f8eb2f902e1548d156584a90}, {0x1b5956deed90482c1cc4989e936ca265252d6dd8159a13270b78248b30843363, 0x072ff5f961d1d225dec43bffd5f031562c9087a3a032305b1b716cdd158da5ca}, {0x1ee79768b58b0bbebf614d41fcfd9e17a88c38b41d697a2104a931a3cf3106d6, 0x2ac2a26c534a3a84f696dd581ee7063f8910ca58954e436470d1fcc17dbbaad2}, {0x013932be07d7ef64690655fe3541d25b47caa20f0dba7e5843dc309e47fd4036, 0x068daa9f3433ea9cfe8ab217593263464d3f3796d224d0c837ceb1ba5a388b5c}, {0x28982c2db4c7cc3f0ac38ae0d7a1774e276872fc2fc9be7b97038d1b7deeadad, 0x00fcd19a4ed741eac34e323909b7407f5a612a101c0d5687ea381bd36fd92d2c}, {0x233baee1bae9440f6456b6172b7b08e3b659265362d198e5196ef41d3a2d4b5a, 0x2eae64ae6c81702e537c49c50c434556a49e9c734bf59580c86f19f2a0fb3374}, {0x2d5968f58c658153ee254d4bded6784e5e057251477b539a6d91f087985338ea, 0x0e0d8224d8090e8f7958bf46ea5f8d2d02370bbab1f4a449e50fee36e3f70773}, {0x282ba63c4d8d5c9d2477af22fa57cbb3618501dd22727c2a3244988179c98d2d, 0x17957e0d498bd3694c8e62242bc37535cd445bf2a773ad9443cb3771fe113854}, {0x156e5523efb7270e38e80e154849f705a6184365b2261f3db870014428425d83, 0x2a5e19cd3faf740e1f3ec427897c8da2804b0479bad28ce00ae15b088b04038b}, {0x07edfbd9cb99499052ada8d94e740625888f260adc45fcb5fe9be555b3221d74, 0x1fd8c3a97911b6eac726e002fd3b84eceaa2b08a57e3df4227067fb5896aaed0}, {0x1725b4a59ea736ec816444dc53dbdf7e78d9194d537fa199c2883a38c60a06ed, 0x249e0d5a519ef3f2ab6240aba00e912927ad4151be494765e2e31a1566828b06}, {0x05483b9dfbeb5b9fb31fd52b885335da4b23cdf83f2607d37e3fcbe112a85365, 0x24e0ba9901789eaa6a0dc74bbf22debf9891bc5c03991db95f69df9c25ca6fcf}, {0x065a6b8b56220596ad72f24aea44c1d62f4c1544f23d4e968112d3d57f76c9b5, 0x2d8d82657d6f9f9d5676cece3b7547be1b2ab34879690cd1d231716891525cf7}, {0x21f2133247ee84c3bd8c96271b6ad6482744b3367a13f0260535a908caea1d20, 0x085b3a99f7d8418907dc897428443fae817137980fe5195974b11d212c6f2171}, {0x29eed773adae30e41534a519179a5193ace5c32048775a50d6e1a7f998c5636b, 0x187868b2ac41a139f3563229e0ee02d65d27e38de3276ad2a4fd503c4f920010}, {0x0ebf18cffd536c5521028aeab7afb898bf91d8abde80f16a70ab404b49dde064, 0x2558d4421ddf231cf775888494c86ac8883a92df8b171dbc7e0f26978c2f1533}, {0x09a5c6756cfc787c9df52f40fa211edfed26f0303bb2e404fa53d486a8ec7963, 0x28e47c414278b7f61d2e58077a5d6f12ebcd88950385108a733284e2861b8f81}];

    static function modReduce(int k, int modulus) : int {
        int res = k % modulus;
        return (res < 0) ? res + modulus : res;
    }

    static function modReduceFQ12(FQ12 k, int modulus) : FQ12 {
         return [
             modReduce(k[0], modulus),
             modReduce(k[1], modulus),
             modReduce(k[2], modulus),
             modReduce(k[3], modulus),
             modReduce(k[4], modulus),
             modReduce(k[5], modulus),
             modReduce(k[6], modulus),
             modReduce(k[7], modulus),
             modReduce(k[8], modulus),
             modReduce(k[9], modulus),
             modReduce(k[10], modulus),
             modReduce(k[11], modulus)
        ];
    }

    static function modInverseEGCD(int x, int n) : int {
        // The following script already does modular reduction at the start so there's no
        // need to normalize x before function call.
        asm {
            OP_2DUP OP_MOD OP_DUP OP_0 OP_LESSTHAN OP_IF OP_DUP OP_2 OP_PICK OP_ADD OP_ELSE OP_DUP OP_ENDIF OP_NIP OP_2 OP_ROLL OP_DROP
            OP_DUP OP_TOALTSTACK OP_TOALTSTACK OP_TOALTSTACK
            OP_1 OP_0 OP_1
            loop(UB) {
                OP_FROMALTSTACK OP_FROMALTSTACK OP_2DUP OP_DUP OP_IF OP_TUCK OP_MOD OP_TOALTSTACK OP_TOALTSTACK OP_DIV OP_MUL OP_SUB OP_TUCK OP_ELSE OP_TOALTSTACK OP_TOALTSTACK OP_DROP OP_DROP OP_ENDIF
            }
            OP_FROMALTSTACK OP_FROMALTSTACK OP_DROP OP_DROP OP_DROP OP_FROMALTSTACK OP_SWAP OP_NIP
        }
    }

    static function negatePointFQ(PointFQ p) : PointFQ {
        PointFQ res = {p.x, modReduce(p.y * -1, P)};
        return res;
    }

    static function doublePointFQ(PointFQ p) : PointFQ {
        int lambda = (3 * p.x * p.x) * modInverseEGCD(2 * p.y, P);

        int rx = modReduce(lambda * lambda - 2 * p.x, P);
        int ry = modReduce(lambda * (p.x - rx) - p.y, P);
        
        PointFQ res = {rx, ry};
        return res;
    }

    static function _mulCoeffsWScalarFQ2(FQ2 coeffs, int scalar) : FQ2 {
        return [coeffs[0] * scalar, coeffs[1] * scalar];
    }

    static function _mulCoeffsWScalarFQ12(FQ12 coeffs, int scalar) : FQ12 {
        return [
            coeffs[0] * scalar,
            coeffs[1] * scalar,
            coeffs[2] * scalar,
            coeffs[3] * scalar,
            coeffs[4] * scalar,
            coeffs[5] * scalar,
            coeffs[6] * scalar,
            coeffs[7] * scalar,
            coeffs[8] * scalar,
            coeffs[9] * scalar,
            coeffs[10] * scalar,
            coeffs[11] * scalar
        ];
    }

    static function _addCoeffsFQ2(FQ2 a, FQ2 b) : FQ2 {
        return [a[0] + b[0], a[1] + b[1]];
    }

    static function _addCoeffsFQ12(FQ12 a, FQ12 b) : FQ12 {
        return [
            a[0] + b[0],
            a[1] + b[1],
            a[2] + b[2],
            a[3] + b[3],
            a[4] + b[4],
            a[5] + b[5],
            a[6] + b[6],
            a[7] + b[7],
            a[8] + b[8],
            a[9] + b[9],
            a[10] + b[10],
            a[11] + b[11]
        ];
    }

    static function _subCoeffsFQ2(FQ2 a, FQ2 b) : FQ2 {
        return [a[0] - b[0], a[1] - b[1]];
    }

    static function _subCoeffsFQ12(FQ12 a, FQ12 b) : FQ12 {
        return [
            a[0] - b[0],
            a[1] - b[1],
            a[2] - b[2],
            a[3] - b[3],
            a[4] - b[4],
            a[5] - b[5],
            a[6] - b[6],
            a[7] - b[7],
            a[8] - b[8],
            a[9] - b[9],
            a[10] - b[10],
            a[11] - b[11]
        ];
    }

    static function _negCoeffsFQ2(FQ2 a) : FQ2 {
        return [-a[0], -a[1]];
    }

    static function _negCoeffsFQ12(FQ12 a) : FQ12 {
        return [
           -a[0], -a[1], -a[2], -a[3], -a[4], -a[5],
           -a[6], -a[7], -a[8], -a[9], -a[10], -a[11]
        ];
    }

    static function _mulCoeffsFQ2(FQ2 a, FQ2 b) : FQ2 {
        int[3] res = [0, 0, 0];
        loop (2) : i {
            loop (2) : j {
               res[i + j] += a[i] * b[j]; 
            }
        }

        int top = res[2];
        loop (2) : i {
            res[i] -= top * modulusCoeffsFQ2[i];
        }

        return [res[0], res[1]];
    }

    static function _mulCoeffsFQ12(FQ12 a, FQ12 b) : FQ12 {
        int[23] res = repeat(0, 23);
        loop (12) : i {
            loop (12) : j {
               res[i + j] += a[i] * b[j]; 
            }
        }

        loop (10) : i {
	    int top = res[22 - i];
	    int exp = (22 - i) - 12;
            loop (12) : j {
                res[exp + j] -= top * modulusCoeffsFQ12[j];
            }
        }

        return [
            res[0], res[1], res[2], res[3], res[4], res[5],
            res[6], res[7], res[8], res[9], res[10], res[11]
        ];
    }

    static function modInverseEGCD_FQ2(FQ2 coeffs) : FQ2 {
        int[3] lm = [1, 0, 0];
        int[3] hm = [0, 0, 0];

        int[3] low = [coeffs[0], coeffs[1], 0];
        int[3] high = [1, 0, 1];    // modulus coeffs for FQ2 are [1, 0]

        loop (2) : i {  // TODO: Always 2?
            int[3] temp = high;
            int[3] o = [0, 0, 0];
            int low1Inv = modInverseEGCD(low[1], P);

            if (i == 0) {
                o[1] += modReduce(temp[2] * low1Inv, P);
                temp[1] -= o[0];
                temp[2] -= o[1];
            }

            o[0] += modReduce(temp[1] * low1Inv, P);
            temp[0] -= o[0];
            temp[1] -= o[1];

            int[3] nm = hm;
            int[3] _new = high;
            
            nm[0] -= lm[0] * o[0];
            _new[0] -= low[0] * o[0];
            nm[1] -= lm[0] * o[1];
            _new[1] -= low[0] * o[1];
            nm[2] -= lm[0] * o[2];
            _new[2] -= low[0] * o[2];

            nm[1] -= lm[1] * o[0];
            _new[1] -= low[1] * o[0];
            nm[2] -= lm[1] * o[1];
            _new[2] -= low[1] * o[1];

            nm[2] -= lm[2] * o[0];
            _new[2] -= low[2] * o[0];

            hm = lm;
            lm = nm;
            high = low;
            low = _new;
        }

        int low0Inv = modInverseEGCD(low[0], P);
        int a = modReduce(lm[0] * low0Inv, P);
        int b = modReduce(lm[1] * low0Inv, P);

        return [a, b];
    }

    static function modInverseEGCD_FQ12(FQ12 coeffs) : FQ12 {
        int[13] lm = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        int[13] hm = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        int[13] low = [
                coeffs[0], coeffs[1], coeffs[2], coeffs[3], coeffs[4], coeffs[5],
                coeffs[6], coeffs[7], coeffs[8], coeffs[9], coeffs[10], coeffs[11], 0
            ];
        int[13] high = [
                82, 0, 0, 0, 0, 0, -18, 0, 0, 0, 0, 0, 1
            ];

        loop (4) : i {
            int[13] r = _poly_rounded_divFQ12(high, low);

            int[13] nm = hm;
            int[13] _new = high;

            loop (13) : j {
                loop (13) : k {
                    if (k < (13 - j)) {
                        nm[j + k] = modReduce(nm[j + k] - (lm[j] * r[k]), P);
                        _new[j + k] = modReduce(_new[j + k] - (low[j] * r[k]), P);
                    }
                }
            }
            
            hm = lm;
            lm = nm;
            high = low;
            low = _new;
            
        }

        int low0Inv = modInverseEGCD(low[0], P);
        return [
            modReduce(lm[0] * low0Inv, P),
            modReduce(lm[1] * low0Inv, P),
            modReduce(lm[2] * low0Inv, P),
            modReduce(lm[3] * low0Inv, P),
            modReduce(lm[4] * low0Inv, P),
            modReduce(lm[5] * low0Inv, P),
            modReduce(lm[6] * low0Inv, P),
            modReduce(lm[7] * low0Inv, P),
            modReduce(lm[8] * low0Inv, P),
            modReduce(lm[9] * low0Inv, P),
            modReduce(lm[10] * low0Inv, P),
            modReduce(lm[11] * low0Inv, P)
        ];
    }

    static function _poly_rounded_divFQ12(int[13] a, int[13] b) : int[13] {
        int dega = _degFQ12(a);
        int degb = _degFQ12(b);
        int[13] temp = a;
        int[13] o = repeat(0, 13);

        // TODO: modular reduction could just be done on a higher level

	    int degDiff = dega - degb;
        loop (12) : i {    // 12 is the max degree diff
            int idxNeg = 11 - i; 
            if (idxNeg <= degDiff) {
                int bValInv = modInverseEGCD(b[degb], P);
                o[idxNeg] += temp[degb + idxNeg] * bValInv;
                loop (12) : c {
                    if (c <= degb) {
                        temp[c + idxNeg] -= o[c];
                    }
                }
            }
        }

        return [
            modReduce(o[0], P),
            modReduce(o[1], P),
            modReduce(o[2], P),
            modReduce(o[3], P),
            modReduce(o[4], P),
            modReduce(o[5], P),
            modReduce(o[6], P),
            modReduce(o[7], P),
            modReduce(o[8], P),
            modReduce(o[9], P),
            modReduce(o[10], P),
            modReduce(o[11], P),
            modReduce(o[12], P)
        ];
    }

    static function _degFQ12(int[13] a) : int {
       bool done = false; 
       int degree = 0;
       loop (13) : i {
           if (!done) {
               if (a[12 - i] != 0) {
                   done = true;
                   degree = 12 - i;
               }
           }
       }
       return degree;
    }

    static function addPointsFQ2(PointFQ2 a, PointFQ2 b) : PointFQ2 {
        PointFQ2 res = zeroPointFQ2;

        if (a.x == b.x && a.y == b.y) {
            res = doublePointFQ2(a);
        } else if (a.x == [0, 0] && a.y == [0, 0]) {
            res = b;
        } else if (b.x == [0, 0] && b.y == [0, 0]) {
            res = a;
        } else {
            FQ2 l0 = _subCoeffsFQ2(b.y, a.y);
            FQ2 l1 = _subCoeffsFQ2(b.x, a.x);
            FQ2 l1ModInv = modInverseEGCD_FQ2(l1);

            FQ2 l = _mulCoeffsFQ2(l0, l1ModInv);

            FQ2 lSquared = _mulCoeffsFQ2(l, l);
            FQ2 newX = _subCoeffsFQ2(_subCoeffsFQ2(lSquared, a.x), b.x);

            FQ2 lNeg = _negCoeffsFQ2(l);
            FQ2 newY_p0 = _mulCoeffsFQ2(lNeg, newX);
            FQ2 newY_p1 = _mulCoeffsFQ2(l, a.x);
            FQ2 newY = _subCoeffsFQ2(_addCoeffsFQ2(newY_p0, newY_p1), a.y);

            res = {
                [modReduce(newX[0], P), modReduce(newX[1], P)],
                [modReduce(newY[0], P), modReduce(newY[1], P)]
            };
        }

        return res;
    }

    static function addPointsFQ12(PointFQ12 a, PointFQ12 b) : PointFQ12 {
        PointFQ12 res = zeroPointFQ12;
             
        if (a.x == b.x && a.y == b.y) {
            res = doublePointFQ12(a);
        } else if (a.x == zeroFQ12 && a.y == zeroFQ12) {
            res = b;
        } else if (b.x == zeroFQ12 && b.y == zeroFQ12) {
            res = a;
        } else {
            FQ12 l0 = _subCoeffsFQ12(b.y, a.y);
            FQ12 l1 = _subCoeffsFQ12(b.x, a.x);
            FQ12 l1ModInv = modInverseEGCD_FQ12(l1);

            FQ12 l = _mulCoeffsFQ12(l0, l1ModInv);

            FQ12 lSquared = _mulCoeffsFQ12(l, l);
            FQ12 newX = _subCoeffsFQ12(_subCoeffsFQ12(lSquared, a.x), b.x);

            FQ12 lNeg = _negCoeffsFQ12(l);
            FQ12 newY_p0 = _mulCoeffsFQ12(lNeg, newX);
            FQ12 newY_p1 = _mulCoeffsFQ12(l, a.x);
            FQ12 newY = _subCoeffsFQ12(_addCoeffsFQ12(newY_p0, newY_p1), a.y);
            res = {
		modReduceFQ12(newX, P),
		modReduceFQ12(newY, P)
            };
        }

        return res;
    }

    static function doublePointFQ2(PointFQ2 p) : PointFQ2 {
        FQ2 xSquared = _mulCoeffsFQ2(p.x, p.x);

        FQ2 l1 = _mulCoeffsWScalarFQ2(xSquared, 3);
        FQ2 l2 = _mulCoeffsWScalarFQ2(p.y, 2);

        FQ2 l = _mulCoeffsFQ2(l1, modInverseEGCD_FQ2(l2));

        FQ2 lSquared = _mulCoeffsFQ2(l, l);
        FQ2 xDoubl = _mulCoeffsWScalarFQ2(p.x, 2);
        FQ2 newX = _subCoeffsFQ2(lSquared, xDoubl);

        FQ2 lNeg = _negCoeffsFQ2(l);
        FQ2 newY_p0 = _mulCoeffsFQ2(lNeg, newX);
        FQ2 newY_p1 = _mulCoeffsFQ2(l, p.x);
        FQ2 newY = _subCoeffsFQ2(_addCoeffsFQ2(newY_p0, newY_p1), p.y);
        
        return {
            [modReduce(newX[0], P), modReduce(newX[1], P)],
            [modReduce(newY[0], P), modReduce(newY[1], P)]
        };
    }

    static function doublePointFQ12(PointFQ12 p) : PointFQ12 {
        FQ12 xSquared = _mulCoeffsFQ12(p.x, p.x);

        FQ12 l1 = _mulCoeffsWScalarFQ12(xSquared, 3);
        FQ12 l2 = _mulCoeffsWScalarFQ12(p.y, 2);

        FQ12 l = _mulCoeffsFQ12(l1, modInverseEGCD_FQ12(l2));

        FQ12 lSquared = _mulCoeffsFQ12(l, l);
        FQ12 xDoubl = _mulCoeffsWScalarFQ12(p.x, 2);
        FQ12 newX = _subCoeffsFQ12(lSquared, xDoubl);

        FQ12 lNeg = _negCoeffsFQ12(l);
        FQ12 newY_p0 = _mulCoeffsFQ12(lNeg, newX);
        FQ12 newY_p1 = _mulCoeffsFQ12(l, p.x);
        FQ12 newY = _subCoeffsFQ12(_addCoeffsFQ12(newY_p0, newY_p1), p.y);
        
        return {
	        modReduceFQ12(newX, P),
	        modReduceFQ12(newY, P)
        };
    }

    static function multPointByScalarFQ2(PointFQ2 p, int m) : PointFQ2 {
        // Double and add method.
        // Lowest bit to highest.
        PointFQ2 q = {[0, 0], [0, 0]};

        bytes mb =   reverseBytes(num2bin(m, S), S);

        //loop (CURVE_BITS) : i {
        //    if (i == 1) {
        //        require(p.x[0] == 5824120281874431589940761181008766003016455314954365240731961123101097176454);
        //    }
        //    if (i == 2) {
        //        require(p.x[0] == 687640652750591342334742604453510892254296554164369498751583714874692996189);
        //    }
	//    if (i == 12) {
	//	require(p.x[0] == 1392590206570674513621495862960540928687813102199086131477826188108028561136);
	//    }
	//    if (i == CURVE_BITS - 2) {
	//	require(p.x[0] == 14756807884139658381221540658038773755644724670858569789854048969755421437908);
	//    }	
        //    if ((mb & (mask << i)) != zero) {
        //        q = addPointsFQ2(q, p);
        //    }

        //    p = doublePointFQ2(p);
        //}

        loop (CURVE_BITS) : i {
            if ((mb & (mask << i)) != zero) {
                q = addPointsFQ2(q, p);
            }

            p = doublePointFQ2(p);
        }
	
	return q;
    }

    static function addPointsFQ(PointFQ p, PointFQ q) : PointFQ {
        PointFQ ret = {0, 0};

        if (p.x == 0 && p.y == 0) {
            // if P == inf -> P + Q = Q
            ret = q;
        } else if (q.x == 0 && q.y == 0) {
            // if Q == inf -> P + Q = P
            ret = p;
        } else {
            int N = 0;
            int D = 0;
            if (p.x == q.x && p.y == q.y) {
                // P == Q
                N = 3 * p.x * p.x + a;
                D = 2 * p.y;
            } else {
                N = q.y - p.y;
                D = q.x - p.x;
            }

            int lambda = modReduce(N * modInverseEGCD(D, P), P);

            int rx = modReduce(lambda * lambda - p.x - q.x, P);
            int ry = modReduce(lambda * (p.x - rx) - p.y, P);

            ret = {rx, ry};
        }

        return ret;
    }

    static function multPointByScalarFQ(PointFQ p, int m) : PointFQ {
        // Double and add method.
        // Lowest bit to highest.
        PointFQ q = {0, 0};

        bytes mb =   reverseBytes(num2bin(m, S), S);

        loop (CURVE_BITS) : i {
            if ((mb & (mask << i)) != zero) {
                q = addPointsFQ(q, p);
            }

            p = doublePointFQ(p);
        }

        return q;
    }

    static function multG1ByScalar(int m) : PointFQ {
        // Fixed-point scalar multiplication for the curve generator point.
        PointFQ q = {0, 0};

        bytes mb =   reverseBytes(num2bin(m, S), S);

        loop (CURVE_BITS) : i {
            if ((mb & (mask << i)) != zero) {
                q = addPointsFQ(q, DOUBLINGS_G1[i]);
            }
        }

        return q;
    }

    static function point2PubKey(PointFQ point) : PubKey {
        // Convert a point to a uncompressed public key.
        return PubKey(b'04' + toBEUnsigned(point.x, 32) + toBEUnsigned(point.y, 32));
    }
    
    static function toBEUnsigned(int n, static const  int l) : bytes {
        // Convert signed integer `n` to unsigned integer of `l` bytes, in big endian.
        bytes m = Utils.toLEUnsigned(n, l);
        return reverseBytes(m,l);
    }

}

