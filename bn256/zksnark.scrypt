import "bn256.scrypt";
import "bn256pairing.scrypt";


struct VerifyingKey {
    CurvePoint alpha;
    TwistPoint beta;
    TwistPoint gamma;
    TwistPoint delta;
    CurvePoint[2] gamma_abc;   // N + 1
}

struct Proof {
    CurvePoint a;
    TwistPoint b;
    CurvePoint c;
}

library ZKSNARK {

    // Number of inputs.
    static const int N = 1;
    static const int N_1 = N + 1;

    static function verify(int[N] inputs, Proof proof, VerifyingKey vk) : bool {

        CurvePoint vk_x = vk.gamma_abc[0];
        loop (N) : i {
            CurvePoint p = BN256.mulCurvePoint(vk.gamma_abc[i + 1], inputs[i]);
            vk_x = BN256.addCurvePoints(vk_x, p);
        }

        return BN256Pairing.pairCheckP4(
                BN256.negCurvePoint(proof.a), proof.b,
                vk.alpha, vk.beta,
                vk_x, vk.gamma,
                proof.c, vk.delta);
    }

}
